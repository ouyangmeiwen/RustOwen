
环境安装
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

source $HOME/.cargo/env

rustc --version
cargo --version


sudo apt update
sudo apt install build-essential


sudo apt-get install libssl-dev

sudo apt-get install pkg-config

sudo apt install gdb
sudo apt-get install lldb-14-dev python3-lldb


构建
cargo build
cargo build --release

运行
cargo run
cargo run --release



调试
//http://127.0.0.1:7788/api/libitems

gdb ./target/debug/rust-mysql-sqx-api

gdbserver :1234 ./target/debug/rust-mysql-sqx-api

gdbserver :1234  /home/owen/RustOwen/MysqlAPI/target/debug/rust-mysql-sqx-api



nohup ./target/debug/rust-mysql-sqx-api > rust-mysql-sqx-api.log 2>&1 &


chmod +x start.sh
./start.sh



#!/bin/bash

while true; do
    # 启动应用
    nohup ./target/debug/rust-mysql-sqx-api > rust-mysql-sqx-api.log 2>&1

    # 检查进程退出码，如果非零则重启
    if [ $? -ne 0 ]; thendocker
        echo "Application crashed. Restarting..."
        sleep 5  # 延迟 5 秒后重启
    fi
done








sys上部署
...略


docker 部署

#删除docker
docker rm -f $(docker ps -aq)
docker rmi -f $(docker images -q)

docker build -t rust-mysql-sqx-api:latest . -f Dockerfile
docker run -d -p 7788:7788 --restart=always --name rust-mysql-sqx-api  rust-mysql-sqx-api:latest

//http://127.0.0.1:7788/api/libitems


docker save -o ./rust:1.82.0_owen.tar imageid
docker save -o ./debian:bullseye_owen.tar imageid

docker load < rust:1.82.0_owen.tar.tar
docker tag imageid rust:1.82.0_owen.tar.tar #可以重命名
命名完然后就可以直接使用Dockfile

FROM rust:1.82.0_owen as builder
...
FROM swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/debian:bullseye