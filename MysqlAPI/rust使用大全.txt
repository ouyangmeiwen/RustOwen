

借用权的操作
借用权允许你在不获取所有权的情况下访问数据，可以是不可变借用或可变借用。
不可变借用 (&)
    当你通过不可变引用借用数据时，你无法修改数据，但可以读取它。多个不可变借用可以同时存在：
可变借用 (&mut)
    当你通过可变引用借用数据时，你可以修改数据，但在某一时间内只能有一个可变引用。你不能在同一作用域内同时有不可变和可变借用：
其他注意事项
    切片：切片也是一种借用的方式，尤其在操作集合（如字符串、数组、切片）时。
    函数参数：当你把一个值传递给函数时，如果传递的是引用（而非直接传值），那么就是借用。
获得所有权：通过赋值、函数返回、集合元素移动等操作。
借用权：通过不可变引用（&）和可变引用（&mut）获得。






获取所有权的操作
    通过变量赋值（转移所有权）
    当一个值赋给另一个变量时，所有权会从源变量转移到目标变量，源变量不再拥有该值：

    通过函数返回值（转移所有权）
    当一个值被从函数返回时，所有权会转移到函数的调用者：

    通过Box<T>进行所有权转移 不可做共享
    Box<T>是一个堆分配的智能指针，当你将一个值放入 Box 中时，所有权转移到 Box：

    Arc<T> 获取所有权的操作
    与 Box<T> 类似，当你将一个值放入 Arc<T> 中时，所有权会从原始变量转移到 Arc<T>：
    克隆 Arc<T>（增加引用计数）
    由于 Arc<T> 使用引用计数，所有者可以在不同线程中共享所有权，适合多线程环境。每次克隆 Arc<T>，都会共享堆上的数据，并增加引用计数。

    通过Vec<T>的元素移动
    如果你从一个 Vec 中移除元素，元素的所有权将转移到新的变量：

    通过String类型的操作
    对于 String 类型的值，如果它被赋给另一个 String 类型变量，所有权会转移：

    通过std::mem::replace替换值
    使用 std::mem::replace 也会将值的所有权转移：

    通过Option<T>或Result<T, E>等枚举的值转移
    枚举类型（如 Option<T> 和 Result<T, E>）可以存储一个值，当从中解构出值时，所有权会转移：

    通过移动到线程中的数据
    当你将数据传递到一个新线程时，数据的所有权会转移到该线程：
    
    通过std::fs::File等类型
    类似于文件、网络连接等资源，传递给这些类型时，资源的所有权会转移：



各种格式打印
fn main() {
    let number = 42;
    let result = format!("The number is {}", number);
    println!("{}", result); // 输出: The number is 42
}


在 Rust 中，format! 宏、print! 宏和 println! 宏都支持格式化输出，类似于 C 语言的 printf。这些宏的格式化功能非常强大，支持不同的数据类型和格式控制。

1. 基本格式化
可以通过 {} 占位符来打印变量的值。

rust
复制代码
fn main() {
    let x = 42;
    let y = 3.14159;
    
    // 基本打印
    println!("x is {}", x); // 输出: x is 42
    println!("y is {}", y); // 输出: y is 3.14159
}
2. 格式化指定宽度
可以通过 {width} 来指定最小宽度，默认右对齐。

rust
复制代码
fn main() {
    let x = 42;
    println!("{:5}", x); // 输出: "   42"（总宽度为5，右对齐）
    println!("{:<5}", x); // 输出: "42   "（左对齐）
    println!("{:^5}", x); // 输出: " 42  "（居中）
}
3. 填充字符
可以通过 {fill}{width} 来指定宽度并使用自定义填充字符。

rust
复制代码
fn main() {
    let x = 42;
    println!("{:0>5}", x); // 输出: "00042"（使用0填充）
    println!("{:*-5}", x); // 输出: "42***"（使用*填充）
}
4. 格式化浮点数
可以指定浮点数的精度和表示方式。

rust
复制代码
fn main() {
    let x = 3.1415926535;
    println!("{:.2}", x); // 输出: "3.14"（保留2位小数）
    println!("{:e}", x); // 输出: "3.141593e0"（科学计数法）
    println!("{:E}", x); // 输出: "3.141593E0"（科学计数法，E大写）
    println!("{:f}", x); // 输出: "3.141593"（固定小数点表示）
}
5. 数字格式化
可以格式化数字为二进制、八进制、十六进制等。

rust
复制代码
fn main() {
    let x = 42;
    println!("{:b}", x); // 输出: "101010"（二进制）
    println!("{:o}", x); // 输出: "52"（八进制）
    println!("{:x}", x); // 输出: "2a"（小写十六进制）
    println!("{:X}", x); // 输出: "2A"（大写十六进制）
}
6. 位置和命名参数
可以使用位置或命名参数来引用值。

rust
复制代码
fn main() {
    let x = 42;
    let y = "hello";
    
    // 使用位置参数
    println!("{0} {1}", x, y); // 输出: 42 hello
    
    // 使用命名参数
    println!("{num} {word}", num = x, word = y); // 输出: 42 hello
}
7. 打印调试信息
使用 {:?} 或 #{:?} 来格式化打印结构体、枚举等调试信息。

rust
复制代码
#[derive(Debug)]
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let point = Point { x: 10, y: 20 };
    println!("{:?}", point); // 输出: Point { x: 10, y: 20 }
    println!("{:#?}", point); // 输出: 
                             // Point {
                             //     x: 10,
                             //     y: 20,
                             // }
}
8. 打印常量和字符串字面量
Rust 允许打印常量和字符串字面量：

rust
复制代码
fn main() {
    const MY_CONST: i32 = 100;
    println!("{}", MY_CONST); // 输出: 100

    let my_str = "Hello, World!";
    println!("{}", my_str); // 输出: Hello, World!
}
9. 自定义格式化
可以实现 std::fmt::Display 或 std::fmt::Debug trait 来控制自定义结构体的格式化输出。

rust
复制代码
use std::fmt;

struct Person {
    name: String,
    age: u32,
}

impl fmt::Display for Person {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Person: {} (age {})", self.name, self.age)
    }
}

fn main() {
    let person = Person {
        name: String::from("Alice"),
        age: 30,
    };
    println!("{}", person); // 输出: Person: Alice (age 30)
}
总结
Rust 的格式化宏 print!, println! 和 format! 提供了丰富的格式化选项：

{}：基本格式化
{:width}：控制宽度
{:0>width}：填充字符
{:b}、{:x}、{:o}：输出二进制、十六进制、八进制
{:?}：调试输出
{:e}、{:f}：浮点数格式化
支持自定义类型的格式化
这些格式化方法为打印输出提供了灵活的选择。